package com.example.demo;

import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;

/**
 * @author n1510639
 *
 */
public class CIEDIPrepopulateCheckSum {

	protected static final Logger LOG = LoggerFactory.getLogger(CIEDIPrepopulateCheckSum.class);
	private static final String Files_Location = "C:\\Users\\n1510639\\process\\CIEDI";
	private static final String Archive_Source = "archive.root";
	private static final String Customer_Response = "CUSTOMERRESPONSE";
	private static final String Element_Expression = "ACORD/ClaimsSvcRq/RqUID";
	private static final String TXT_ARCHIVE = ".TXT.ARCHIVE";
	private static StringBuilder logActivities = null;

	public static void main(String[] args) {
		logActivities = new StringBuilder();
		populateRequestIds();
	}

	/**
	 * @return List of requestIds.
	 */
	private static void populateRequestIds() {
		LOG.info("Reading files from root archive");
		File dir = new File(Files_Location);
		File[] filteredFiles = filterFiles(dir);
		LOG.debug("File count after filter:{}", filteredFiles.length - 1);
		logActivities.append("Total no of files=");
		logActivities.append(filteredFiles.length - 1);

		for (File file : filteredFiles) {
			if (file.length() == 0) {  // to avoid org.xml.sax.SAXParseException: Premature end of file issue.
				LOG.info("File: {} is empty", file.getName());
			} else if (file.isHidden()) {
				LOG.info("{} is a hidden file", file.getName());
			} else {
				 getRequestUniqueId(file);
			}
		}
	}

	/**
	 * @param file
	 * @return
	 */
	private static void getRequestUniqueId(File file) {
		LOG.info("File {} is ready for DOM and XPath operations", file);
		String requestId = null;
		String chuckSumId = null;
		try {
			DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
			Document document = documentBuilder.parse(file);
			document.normalize();
			LOG.info("File {} completed DOM parsing", file);
			XPathFactory xPathFactory = XPathFactory.newInstance();
			XPath xPath = xPathFactory.newXPath();
			requestId = xPath.evaluate(Element_Expression, document);
			if (StringUtils.isNotBlank(requestId)) {
				// Include it in xml
				LOG.info("File {} completed XPath traverse", file);
				chuckSumId = getCheckSum(requestId); //TODO :: this where you call checkSum method.
				if (StringUtils.isNotBlank(chuckSumId)) {
					// TODO :: Update in DAO.
				} else {
					LOG.info("Requester Id-{} has no checksum value", requestId);
				}
			}
		} catch (Exception e) {
			LOG.error("File {} .Caught exception while DOM and XPath operations", file, e);
		}
	}

	/**
	 * @param requestId
	 * @return
	 */
	private static String getCheckSum(String requestId) {
		return UUID.randomUUID().fromString(requestId).toString();
	}

	/**
	 * @param file
	 * @return
	 */
	private static File[] filterFiles(File file) {
		return file.listFiles(new FilenameFilter() {
			@Override
			public boolean accept(File dir, String name) {
				return name.toUpperCase().contains(TXT_ARCHIVE) && !name.toUpperCase().contains(Customer_Response);
			}
		});
	}

}
