package com.fmr.PR000029.rtc.workitem.automation;

import java.net.URI;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;

import com.ibm.team.foundation.common.text.XMLString;
import com.ibm.team.process.client.IProcessClientService;
import com.ibm.team.process.common.IProjectArea;
import com.ibm.team.repository.client.IContributorManager;
import com.ibm.team.repository.client.ITeamRepository;
import com.ibm.team.repository.client.ITeamRepository.ILoginHandler;
import com.ibm.team.repository.client.ITeamRepository.ILoginHandler.ILoginInfo;
import com.ibm.team.repository.client.TeamPlatform;
import com.ibm.team.repository.common.IContributor;
import com.ibm.team.repository.common.IContributorHandle;
import com.ibm.team.repository.common.TeamRepositoryException;
import com.ibm.team.workitem.client.IAuditableClient;
import com.ibm.team.workitem.client.IWorkItemClient;
import com.ibm.team.workitem.client.WorkItemOperation;
import com.ibm.team.workitem.client.WorkItemWorkingCopy;
import com.ibm.team.workitem.common.IWorkItemCommon;
import com.ibm.team.workitem.common.model.IAttribute;
import com.ibm.team.workitem.common.model.IAttributeHandle;
import com.ibm.team.workitem.common.model.ICategoryHandle;
import com.ibm.team.workitem.common.model.IEnumeration;
import com.ibm.team.workitem.common.model.ILiteral;
import com.ibm.team.workitem.common.model.IWorkItem;
import com.ibm.team.workitem.common.model.IWorkItemHandle;
import com.ibm.team.workitem.common.model.IWorkItemType;
import com.ibm.team.workitem.common.model.Identifier;
public class CreateWorkItem {
	
	private static class LoginHandler implements ILoginHandler, ILoginInfo {
		
		private String fUserId;
		private String fPassword;
		
		private LoginHandler(String userId, String password) {
			fUserId= userId;
			fPassword= password;
		}
		
		public String getUserId() {
			return fUserId;
		}
		
		public String getPassword() {
			return fPassword;
		}
		
		public ILoginInfo challenge(ITeamRepository repository) {
			return this;
	}
		}
	
	private static class WorkItemInitialization extends WorkItemOperation {
		
		private String fSummary;
		private ICategoryHandle fCategory;
		private IWorkItemCommon fworkItemCommon;
		private IProjectArea fprojectArea;
		private IWorkItemClient fworkItemClient;
		public WorkItemInitialization(String summary, ICategoryHandle category, IWorkItemCommon workItemCommon, IProjectArea projectArea, IWorkItemClient workItemClient) {
			super("Initializing Work Item");
			fSummary= summary;
			fCategory= category;
			fworkItemCommon= workItemCommon;
			fprojectArea= projectArea;
		    fworkItemClient= workItemClient;
		}
		
		@Override
		protected void execute(WorkItemWorkingCopy workingCopy, IProgressMonitor monitor) throws TeamRepositoryException {
			IWorkItem workItem= workingCopy.getWorkItem();
			IAttribute attribute= fworkItemCommon.findAttribute(fprojectArea, "com.pasa.team.workitem.attribute.description", null);
			IAttribute attribute2= fworkItemCommon.findAttribute(fprojectArea, "com.pasa.team.workitem.attribute.role", null);
			IAttribute attribute3= fworkItemCommon.findAttribute(fprojectArea, "com.pasa.team.workitem.attribute.lead", null);
			IContributorHandle leadContributorHandle = (IContributorHandle) workItem.getValue(attribute3);
			IAttribute attribute4= fworkItemCommon.findAttribute(fprojectArea, "com.pasa.team.workitem.attribute.tool", null);
			IAttribute attribute5= fworkItemCommon.findAttribute(fprojectArea, "com.pasa.team.workitem.attribute.project", null);
			IContributorHandle projectContributorHandle = (IContributorHandle) workItem.getValue(attribute5);
			workItem.setHTMLSummary(XMLString.createFromPlainText(fSummary));
			workItem.setCategory(fCategory);
			if(workItem.hasCustomAttribute(attribute))
			{
				workItem.setValue(attribute, "Text");
			}
//			List values = new ArrayList();
//			values.add(getLiteralEqualsString("Build Engineer", attribute2, fworkItemClient));
			workItem.setValue(attribute2,getLiteralEqualsString("Build Engineer", attribute2, fworkItemClient));
			workItem.setValue(attribute3, leadContributorHandle);
			workItem.setValue(attribute4,getLiteralEqualsString("RTC", attribute4, fworkItemClient));
			//workItem.setValue(attribute5,getLiteralEqualsString("VP4", attribute5, fworkItemClient));
			workItem.setValue(attribute5, projectContributorHandle);
		}
		private static Identifier getLiteralEqualsString(String name, IAttributeHandle ia, IWorkItemClient workItemClient) throws TeamRepositoryException {
		    Identifier literalID = null;
		    IEnumeration enumeration = workItemClient.resolveEnumeration(ia, null);// or IWorkitemCommon
		    List literals = enumeration.getEnumerationLiterals();
		    for (Iterator iterator = literals.iterator(); iterator.hasNext();) {
		        ILiteral iLiteral = (ILiteral) iterator.next();
		        if (iLiteral.getName().equals(name)) {
		            literalID = iLiteral.getIdentifier2();
		            break;
		        }
		    }
		    return literalID;
		}
		
		/**
		   * Gets the value of a Work Item (Contributor (User)) attribute.
		   *
		   */
		   public String getAttributeValue_Contributor(String attributeID) throws TeamRepositoryException
		   {
		      
		      IAttribute attribute = workItemServer.findAttribute(workItem.getProjectArea(), attributeID, monitor);
		      IContributorHandle contributorHandle = (IContributorHandle) workItem.getValue(attribute);
		      /*IContributor contributor = (IContributor) itemService.fetchItem(contributorHandle, null);
		      returnValue = contributor.getName();*/

		      return contributorHandle;
		   }
		
	}
	
	public static void main(String[] args) {
		
		boolean result;
		TeamPlatform.startup();
		try {
			result= run(args);
		} catch (TeamRepositoryException x) {
			x.printStackTrace();
			result= false;
		} finally {
			TeamPlatform.shutdown();
		}
		
		if (!result)
			System.exit(1);
		
	}
	
	private static boolean run(String[] args) throws TeamRepositoryException {
		
		if (args.length != 8) {
			System.out.println("Usage: CreateWorkItem <repositoryURI> <userId> <password> <projectArea> <workItemType> <summary> <category> <discription>");
			return false;
		}
		
		String repositoryURI= args[0];
		String userId= args[1];
		String password= args[2];
		String projectAreaName= args[3];
		String typeIdentifier= args[4];
		String summary= args[5];
		String categoryName= args[6];
		String description= args[7];
		
		ITeamRepository teamRepository= TeamPlatform.getTeamRepositoryService().getTeamRepository(repositoryURI);
		teamRepository.registerLoginHandler(new LoginHandler(userId, password));
		teamRepository.login(null);
		IProcessClientService processClient= (IProcessClientService) teamRepository.getClientLibrary(IProcessClientService.class);
		IAuditableClient auditableClient= (IAuditableClient) teamRepository.getClientLibrary(IAuditableClient.class);
		IWorkItemClient workItemClient= (IWorkItemClient) teamRepository.getClientLibrary(IWorkItemClient.class);
		IWorkItemCommon workItemCommon = (IWorkItemCommon) teamRepository.getClientLibrary(IWorkItemCommon.class);
		IContributor user = teamRepository.loggedInContributor();
		IContributor userHandler = teamRepository.contributorManager().fetchContributorByUserId("kumarvik", null);
		URI uri= URI.create(projectAreaName.replaceAll(" ", "%20"));
		IProjectArea projectArea= (IProjectArea) processClient.findProcessArea(uri, null, null);
		if (projectArea == null) {
			System.out.println("Project area not found.");
			return false;
		}
		
		IWorkItemType workItemType= workItemClient.findWorkItemType(projectArea, typeIdentifier, null);
		if (workItemType == null) {
			System.out.println("Work item type not found.");
			return false;
		}
		
		List path= Arrays.asList(categoryName.split("/"));
		ICategoryHandle category= workItemClient.findCategoryByNamePath(projectArea, path, null);
		if (category == null) {
			System.out.println("Category not found.");
			return false;
		}
		IAttribute attribute= workItemCommon.findAttribute(projectArea, "com.pasa.team.workitem.attribute.description", null);
		WorkItemInitialization operation= new WorkItemInitialization(summary, category, workItemCommon, projectArea, workItemClient,userHandler);
		
		IWorkItemHandle handle= operation.run(workItemType, null);
		IWorkItem workItem= auditableClient.resolveAuditable(handle, IWorkItem.FULL_PROFILE, null);
		System.out.println("Created work item " + workItem.getId() + ".");
		
		teamRepository.logout();
		
		return true;
	}
}
